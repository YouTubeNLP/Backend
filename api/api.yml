---
openapi: 3.0.0
info:
  version: 0.0.1
  title: YouTubeNLP
  description: This is the specification for the YouTubeNLP backend services.

servers:
  - description: YouTubeNLP Backend API
    url: https://{environment}.youtubenlp.com/v{version}
    variables:
      environment:
        default: dev
        enum:
          - api   # YouTubeNLP Production Endpoint
          - dev   # YouTubeNLP Development Endpoint
          - stage # YouTubeNLP Staging Endpoint
      version: 
        default: 0.0.1

paths:

  /sentiments/{videoId}/score:
    get:
      description: Aggregate sentiment analysis.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
      responses:
        200:
          description: Successfully returned sentiment values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'

  /sentiments/{videoId}:
    get:
      description: Sentiment analysis sentences.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'            
        - name: k
          description: Top k values.
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        200:
          description: Successfully returned sentiment values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sentence'

  /comments/{videoId}:
    get:
      description: Most engaged comments.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'           
      responses:
        200:
          description: Successfully returned scored comments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /comments/{videoId}/controversial:
    get:
      description: Most engaged comments.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
        - name: k
          description: Top k values.
          in: query
          required: true
          schema:
            type: integer
            format: float
            minimum: 1
        - name: lambda1
          description: Lower bound weight of number of dislikes.
          in: query
          required: true
          schema:
            type: integer
            format: float
            minimum: 0
            maximum: 1
        - name: lambda2
          description: Upper bound weight of number of dislikes.
          in: query
          required: true
          schema:
            type: integer
            format: float
            minimum: 0
            maximum: 1
      responses:
        200:
          description: Successfully returned controversial comments string.
          content:
            application/json:
              schema:
                type: object
                properties:
                  controversial:
                    type: array
                    items:
                      type: string

  /emotions/{videoId}/score:
    get:
      description: Emotion analysis score.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
      responses:
        200:
          description: Successfully returned sentiment values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Emotion'

  /ner/{videoId}:
    get:
      description: Named entity recognition from video.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
      responses:
        200:
          description: Successfully returned entities as string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'  

  /ner/{videoId}/targeted:
    get:
      description: NER for targed Entity.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
        - name: entity
          description: Entity value.
          in: query
          required: true
          schema: 
            type: array
            items:
              type: string
      responses:
        200:
          description: Successfully returned entities as string.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

  /lda/{videoId}:
    get:
      description: Topic modelling using linear discriminant analysis.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
        - name: n
          description: Number of topics.
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        200:
          description: Successfully returned sentiment values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'

  /world-cloud/{videoId}:
    get:
      description: Word Cloud Visualization.
      parameters:
        - name: videoId
          description: Video code from YouTube url.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/VideoId'
      responses:
        200:
          description: Successfully returned dictonary of words with their frequency.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Word'

components:
  schemas:
  
    VideoId:
      description: NA
      type: string
      format: uuid
      maxLength: 11
  
    Score:
      description: NA
      type: object
      properties:
        positive:
          type: integer
          format: float
          minimum: 0
          maximum: 1
        negative:
          type: integer
          format: float
          minimum: 0
          maximum: 1
        neutral:
          type: integer
          format: float
          minimum: 0
          maximum: 1
  
    Sentence:
      description: NA
      type: object
      properties:
        positive:
          type: array
          items:
            type: string
        negative:
          type: array
          items:
            type: string
        neutral:
          type: array
          items:
            type: string
  
    Comment:
      description: NA
      type: object
      properties:
        positive:
          type: array
          items:
            type: string
        negative:
          type: array
          items:
            type: string
        neutral:
          type: array
          items:
            type: string
  
    Emotion:
      description: NA
      type: object
      properties:
        anger:
          $ref: '#/components/schemas/Lambda'
        sadness:
          $ref: '#/components/schemas/Lambda'         
        fear:
          $ref: '#/components/schemas/Lambda'        
        joy:
          $ref: '#/components/schemas/Lambda'         
        interest:
          $ref: '#/components/schemas/Lambda'         
        surprise:
          $ref: '#/components/schemas/Lambda'         
        disgust:
          $ref: '#/components/schemas/Lambda'         
        shame:
          $ref: '#/components/schemas/Lambda'

    Lambda:
      description: NA
      type: integer
      format: double
      minimum: 0
      maximum: 1

    Entity:
      description: NA
      type: object
      properties:
        person:
          type: array
          items:
            type: string
        place:
          type: array
          items:
            type: string
        event:
          type: array
          items:
            type: string
        time:
          type: array
          items:
            type: string

    Person:
      description: NA
      type: object
      properties:
        name:
          type: string
        sentiments:
          type: object
          properties:
            positive:
              $ref: '#/components/schemas/Sentiment'
            negative:
              $ref: '#/components/schemas/Sentiment'
            neutral:
              $ref: '#/components/schemas/Sentiment'

    Sentiment:
      description: NA
      type: object
      properties: 
        score: 
          type: integer
          format: float
          minimum: 0
          maximum: 1
        corresponding_sentences:
          type: array
          items:
            type: string

    Topic:
      description: NA
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          corresponding_words:
            type: array
            items:
              type: string

    Word:
      description: NA
      type: object
      properties:
        name:
          type: string
        freqency:
          type: integer
          format: int32
          minimum: 1